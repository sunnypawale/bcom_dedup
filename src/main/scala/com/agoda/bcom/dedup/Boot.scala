package com.agoda.bcom.dedup

import akka.actor.ActorSystem
import akka.stream.ActorMaterializer
import com.agoda.bcom.dedup.actors.AvRoomActor
import com.agoda.bcom.dedup.client.BookingClient
import com.agoda.bcom.dedup.repository.{DBPlugin, DedupRepository}
import com.agoda.bcom.dedup.service.DiscoveryService
import com.typesafe.config.ConfigFactory
import com.typesafe.scalalogging.LazyLogging
import org.h2.tools.Server
import play.api.libs.ws.ahc.StandaloneAhcWSClient

import scala.concurrent.duration._
import scala.util.Try

/**
  * Created by npawale on 12/13/17.
  */
object Boot extends App with LazyLogging {

  implicit val system = ActorSystem("cds-de-dup")
  implicit val materializer = ActorMaterializer()
  implicit val executionContext = system.dispatcher


  val hotelCodesStr = //"37351"
    //"40821,1443642,27651,1069814,243903,2776731,387366,294100,1424091,173753,35201,255421,219994,1729130,47388,10072,1675077,182157,1769895,21677,344364,1870079,2233831,910710,696374,11778,1799059,81431,896881,360644,57556,1346915,1586225,1903751,2019405,1845518,1027622,605536,35307,10763,605536,27454,35290,438756,282988,1772769,482346,2025849,351167,189903,325772,384925,29736,190884,50927,255767,68944,497019,39597,1758925,24924,298996,79827,239722,1104049,715788,314927,35551,1603813,79518,1851780,1586041,2396166,1950921,589936,356327,288593,522321,250521,341378,1329752,605536,172947,2758091,300314,2249363,41609,181107,265467,2340348,1519793,1934027,2739970,1918230,1539479,239545,2488223,1913787,1608095,60395,1934030,1270949,813318,20137,2503725,428926,79709,457188,85380,1847502,468061,2578890,76394,913216,121654,183610,1958699,410862,421309,1993672,27364,238846,63816,2833389,1539429,1268961,1520028,191401,1190968,189324,1539568,275747,309711,591975,2488278,226559,1934428,20261,503730,2488327,245603,1934041,2275818,21225,2340310,1934232,10320,78770,628542,1604302,244965,61078,1285952,380755,1119679,256746,1958107,336396,1362714,2027501,44398,239722,42403,97354,2570060,281672,275500,265494,66907,342606,2076545,1334842,239722,2718122,272186,369240,577343,857935,1837417,26057,404419,360644,239722,1838418,2303851,255286,330597,40207,43951,1104716,338708,1395698,605536,1935781,1225368,699263,299333,86406,54729,489860,293117,693577,315496,1593020,719448,2927748,2089597,231058,191233,1628599,189951,1964929,868927,902492,699263,1401843,257300,28756,250205,506790,300314,511806,300314,255421,97303,1663682,394094,43539,1873291,2063543,2570060,2862630,1649185,1187920,1927902,1847514,71869,1026549,54871,2402495,1448755,54628,875654,2063530,2161875,356163,86997,404964,2056691,19496,373507,37351,623276,102544,575572,1608095,183249,321671,2556995,67256,1539478,1574390,68296,2636422,1034161,236389,1312546,2907168,1398906,25081,1125524,1054366,275006,240714,90666,51383,1933988,257861,50927,27454,1817725,1432289,1043580,2019580,1936384,300314,27454,2029529,526024,66792,1335733,2017741,1598581,29959,1389183,535439,40307,413246,75029,1829019,82889,394713,2337217,23707,2042035,1310132,1181855,504842,1343391,292467,1570640,779840,27392,255228,1927870,384961,1892074,457726,50927,1920546,255512,260145,284164,79827,26828,1548940,355639,1762533,257861,360644,13494,255228,280397,1985820,2409763,693577,238525,2370908,1134837,289667,1696837,182159,1401843,256746,2220987,256746,2126872,10455,107076,293440,1843583,1934147,2281394,90978,254889,2002577,285456,365622,521996,1454742,1181159,247955,1683460,378866,79827,37931,2387234,1966586,1714084"
  "1007641,1004039,281119,252907,100878,100825,100781,100770,100768,100732,100700,100698,100665,100651,100582,100566,100345,100330,100320,100292,100277,100275,100261,100244,100236,100214,100197,100110,55220,10087,10086,10083,10079,10076,10073,10070,10064,10061,10059,10057,10056,10054,10048,10045,10042,10038,10036,10031,10028,10019,10009,10007,10003"
  val delimiter = ","

  val hotelCodes = Try(System.getProperty("hotels", hotelCodesStr).split(delimiter).map(_.trim.toInt).toSet).getOrElse(Set.empty)
  val url = System.getProperty("bcom.url", "https://xml-avchanges.booking.com")
  val userName = System.getProperty("username", "agoda2")
  val pass = System.getProperty("pass", "franz2")
  val isCreateNewDb = Try(System.getProperty("isNewDb").toBoolean).getOrElse(true)
  val isMD5Hash = Try(System.getProperty("is.md5.hash").toBoolean).getOrElse(true)
  val isRawData = Try(System.getProperty("is.raw.data").toBoolean).getOrElse(false)

  val config = ConfigFactory.load()
  logger.info(s" ############# Starting App with ${hotelCodes.size} White List Hotels ################")
  val wsClient = StandaloneAhcWSClient()

  val bcomClient = new BookingClient(wsClient, userName, pass, url)

  val db = new DBPlugin()

  db.createNewDB(isCreateNewDb)

  val deDupRepo = new DedupRepository(db)
  deDupRepo.createDeDupTable()
  val avRoomActor = system.actorOf(AvRoomActor.props(bcomClient, deDupRepo, 20, isMD5Hash, isRawData))

  val service = new DiscoveryService(bcomClient, hotelCodes, avRoomActor).nextSchedule(0.second)

  sys.addShutdownHook(() => system.terminate())

  openServerModeInBrowser()

  def openServerModeInBrowser() {
    val server = Server.createWebServer().start()
    println("H2 DB Server started and connection is open.")
    println("URL: jdbc:h2:" + server.getURL() + "/:./data/local/dedup")

    sys.addShutdownHook(() => {
      server.stop()
      server.shutdown()
    })
  }
}
